; pid_tuner_simulation.ini

[DATABASE]
db_host = FRCDKSPA-0002
db_name = Runtime
db_user = USE_Runtime
db_password = Run_USE_24@
odbc_driver = ODBC Driver 17 for SQL Server
table_name = History
; trusted_connection = no ; ou yes si vous utilisez l'auth Windows

[TAGS]
# Tags requis pour l'acquisition des données initiales
pv_tag_name = N1N2_lt_4401
mv_tag_name = N1N2_lIC_4401_out
sp_tag_name = N1N2_lIC_4401_SP

# Optionnel: Tags de perturbation si votre modèle les utilise et que vous souhaitez les initialiser
disturbance_tag_1 = N1N2_XV4422_zso
disturbance_tag_2 = ACOM_T_COM_XV_02_O

[TIME_SETTINGS]
# Période pour acquérir les données initiales (lags)
# Nous prendrons les X premières secondes des données de test du model_builder
initial_data_duration_seconds = 10
# Start_time et end_time pour définir la fenêtre de données historiques à utiliser
# Ces valeurs doivent correspondre à une période de test valide non utilisée pour l'entraînement du modèle ML
historical_data_start_time = 2025-05-18 00:00:00  ; Exemple: Début d'une période de test
historical_data_end_time = 2025-05-18 01:00:00    ; Exemple: Fin d'une période de test
ww_resolution_ms = 100 ; Doit correspondre à la résolution utilisée pour entraîner le modèle ML

[MODEL_PATHS]
model_file = ./Pid_Model/trained.joblib
scalers_file = ./Pid_Model/scalers.joblib

[PID_PARAMS_TEST]
# Jeu de paramètres PID pour le test unitaire de la fonction de simulation
kp_test = 2.5
ti_test = 150.0
td_test = 1.0

[SIMULATION_PARAMS]
# Durée de la simulation en boucle fermée (en secondes)
simulation_duration_seconds = 60
# Période d'échantillonnage pour la simulation et le contrôleur PID (en millisecondes)
# Doit être cohérente avec ww_resolution_ms et les données d'entraînement du modèle ML
tsamp_simulation_ms = 100

# Limites de la MV pour le PID simulé
mv_min = 5.0
mv_max = 25.0
direct_action = true ; True si erreur positive -> augmentation MV. False pour action inverse.

# Structure du PID et action dérivée (doit correspondre à ce que le modèle ML a appris si pertinent)
pid_structure = parallel_isa  ; Ou 'parallel_kp_global'
derivative_action = on_error  ; Ou 'on_pv'

[SCENARIO_PARAMS]
# Paramètres pour le scénario de test (SP et perturbations)
# Type de scénario: 'constant_sp_with_disturbance', 'sp_step'
scenario_type = sp_step 
# Pour 'constant_sp_with_disturbance':
# disturbance_time_seconds = 10 ; Moment d'application de la perturbation
# disturbance_mv_offset = 5.0   ; Perturbation ajoutée à la MV (si applicable, ou modifier PV)
# Pour 'sp_step':
sp_initial_offset = 0.0       ; Offset par rapport à la SP initiale des données acquises
sp_step_time_seconds = 15     ; Moment du changement de SP (en secondes après le début de la sim)
sp_step_value_offset = 2.0    ; Changement de valeur de SP (offset par rapport à la SP avant l'échelon)

[PERFORMANCE_METRICS]
# Métriques de performance et leurs poids (pour l'optimisation future)
# Exemple: IAE (Integral Absolute Error), ISE (Integral Squared Error)
metric_type = IAE
# iae_weight = 1.0
# ise_weight = 0.0
# overshoot_penalty = 0.0
# mv_change_penalty = 0.0

[OUTPUT]
# Chemin pour sauvegarder le graphique de la simulation de test
plot_save_path = ./trace/pid_tuner_simulation_test_plot.png
# Nom de base pour le fichier de log
log_file_base_name = ./trace/pid_tuner_simulation_log